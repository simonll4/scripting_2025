import fs from "fs";
import path from "path";
import Ajv from "ajv";
import addFormats from "ajv-formats";

const ajv = new Ajv({ allErrors: true, strict: false });
addFormats(ajv);

export const commands = new Map();
export const validators = new Map();

// Resolver el directorio de módulos de negocio
const modulesDir = path.resolve(
  path.dirname(new URL(import.meta.url).pathname),
  "./"
);

// Función para cargar módulos de negocio
async function loadBusinessModules() {
  // Limpiar registros existentes
  commands.clear();
  validators.clear();

  // Cargar todos los subdirectorios de modules/
  for (const entry of fs.readdirSync(modulesDir, { withFileTypes: true })) {
    if (!entry.isDirectory()) continue;

    const modPath = path.join(modulesDir, entry.name, "index.js");
    if (!fs.existsSync(modPath)) continue;

    try {
      // Importar el módulo de negocio
      const moduleUrl = `file://${modPath}`;
      const mod = await import(moduleUrl);

      // Extraer { act, command, schema }
      const { act, command, schema } = mod;

      if (!act || !command) {
        console.warn(
          `Módulo de negocio ${entry.name} incompleto (falta act/command).`
        );
        continue;
      }

      // Registrar comando de negocio
      commands.set(act, command);
      console.log(`Módulo negocio cargado: ${entry.name} -> ${act}`);

      // Registrar validador si hay schema
      if (schema) {
        validators.set(act, ajv.compile(schema));
        console.log(`Schema negocio registrado para: ${act}`);
      }
    } catch (error) {
      console.error(
        `Error cargando módulo negocio ${entry.name}:`,
        error.message
      );
    }
  }

  console.log(`Cargados ${commands.size} módulos de negocio`);
}

// Auto-cargar módulos de negocio al importar
await loadBusinessModules();

// Función helper para recargar módulos de negocio en desarrollo
export async function reloadModules() {
  await loadBusinessModules();
}

// Función helper para obtener información de un comando
export function getCommandInfo(act) {
  const command = commands.get(act);
  const validator = validators.get(act);

  return {
    exists: !!command,
    command,
    validator,
    hasSchema: !!validator,
  };
}

// Función helper para listar todos los comandos disponibles
export function listCommands() {
  return Array.from(commands.keys());
}
